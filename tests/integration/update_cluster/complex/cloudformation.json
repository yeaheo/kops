{
  "Resources": {
    "AWSAutoScalingAutoScalingGroupmasterustest1amasterscomplexexamplecom": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AutoScalingGroupName": "master-us-test-1a.masters.complex.example.com",
        "LaunchConfigurationName": {
          "Ref": "AWSAutoScalingLaunchConfigurationmasterustest1amasterscomplexexamplecom"
        },
        "MaxSize": 1,
        "MinSize": 1,
        "VPCZoneIdentifier": [
          {
            "Ref": "AWSEC2Subnetustest1acomplexexamplecom"
          }
        ],
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "complex.example.com",
            "PropagateAtLaunch": true
          },
          {
            "Key": "Name",
            "Value": "master-us-test-1a.masters.complex.example.com",
            "PropagateAtLaunch": true
          },
          {
            "Key": "Owner",
            "Value": "John Doe",
            "PropagateAtLaunch": true
          },
          {
            "Key": "foo/bar",
            "Value": "fib+baz",
            "PropagateAtLaunch": true
          },
          {
            "Key": "k8s.io/role/master",
            "Value": "1",
            "PropagateAtLaunch": true
          },
          {
            "Key": "kops.k8s.io/instancegroup",
            "Value": "master-us-test-1a",
            "PropagateAtLaunch": true
          }
        ],
        "MetricsCollection": [
          {
            "Granularity": "1Minute",
            "Metrics": [
              "GroupDesiredCapacity",
              "GroupInServiceInstances",
              "GroupMaxSize",
              "GroupMinSize",
              "GroupPendingInstances",
              "GroupStandbyInstances",
              "GroupTerminatingInstances",
              "GroupTotalInstances"
            ]
          }
        ],
        "LoadBalancerNames": [
          {
            "Ref": "AWSElasticLoadBalancingLoadBalancerapicomplexexamplecom"
          }
        ]
      }
    },
    "AWSAutoScalingAutoScalingGroupnodescomplexexamplecom": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AutoScalingGroupName": "nodes.complex.example.com",
        "LaunchConfigurationName": {
          "Ref": "AWSAutoScalingLaunchConfigurationnodescomplexexamplecom"
        },
        "MaxSize": 2,
        "MinSize": 2,
        "VPCZoneIdentifier": [
          {
            "Ref": "AWSEC2Subnetustest1acomplexexamplecom"
          }
        ],
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "complex.example.com",
            "PropagateAtLaunch": true
          },
          {
            "Key": "Name",
            "Value": "nodes.complex.example.com",
            "PropagateAtLaunch": true
          },
          {
            "Key": "Owner",
            "Value": "John Doe",
            "PropagateAtLaunch": true
          },
          {
            "Key": "foo/bar",
            "Value": "fib+baz",
            "PropagateAtLaunch": true
          },
          {
            "Key": "k8s.io/role/node",
            "Value": "1",
            "PropagateAtLaunch": true
          },
          {
            "Key": "kops.k8s.io/instancegroup",
            "Value": "nodes",
            "PropagateAtLaunch": true
          }
        ],
        "MetricsCollection": [
          {
            "Granularity": "1Minute",
            "Metrics": [
              "GroupDesiredCapacity",
              "GroupInServiceInstances",
              "GroupMaxSize",
              "GroupMinSize",
              "GroupPendingInstances",
              "GroupStandbyInstances",
              "GroupTerminatingInstances",
              "GroupTotalInstances"
            ]
          }
        ]
      }
    },
    "AWSAutoScalingLaunchConfigurationmasterustest1amasterscomplexexamplecom": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": true,
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeType": "gp2",
              "VolumeSize": 64,
              "DeleteOnTermination": true
            }
          },
          {
            "DeviceName": "/dev/sdc",
            "VirtualName": "ephemeral0"
          }
        ],
        "IamInstanceProfile": {
          "Ref": "AWSIAMInstanceProfilemasterscomplexexamplecom"
        },
        "ImageId": "ami-12345678",
        "InstanceType": "m3.medium",
        "KeyName": "kubernetes.complex.example.com-c4:a6:ed:9a:a8:89:b9:e2:c3:9c:d6:63:eb:9c:71:57",
        "SecurityGroups": [
          {
            "Ref": "AWSEC2SecurityGroupmasterscomplexexamplecom"
          }
        ],
        "UserData": "extracted",
        "InstanceMonitoring": false
      }
    },
    "AWSAutoScalingLaunchConfigurationnodescomplexexamplecom": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": true,
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeType": "gp2",
              "VolumeSize": 128,
              "DeleteOnTermination": true
            }
          }
        ],
        "IamInstanceProfile": {
          "Ref": "AWSIAMInstanceProfilenodescomplexexamplecom"
        },
        "ImageId": "ami-12345678",
        "InstanceType": "t2.medium",
        "KeyName": "kubernetes.complex.example.com-c4:a6:ed:9a:a8:89:b9:e2:c3:9c:d6:63:eb:9c:71:57",
        "SecurityGroups": [
          {
            "Ref": "AWSEC2SecurityGroupnodescomplexexamplecom"
          },
          "sg-exampleid3",
          "sg-exampleid4"
        ],
        "UserData": "extracted",
        "InstanceMonitoring": true
      }
    },
    "AWSEC2DHCPOptionscomplexexamplecom": {
      "Type": "AWS::EC2::DHCPOptions",
      "Properties": {
        "DomainName": "us-test-1.compute.internal",
        "DomainNameServers": [
          "AmazonProvidedDNS"
        ],
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "complex.example.com"
          },
          {
            "Key": "Name",
            "Value": "complex.example.com"
          },
          {
            "Key": "kubernetes.io/cluster/complex.example.com",
            "Value": "owned"
          }
        ]
      }
    },
    "AWSEC2InternetGatewaycomplexexamplecom": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "complex.example.com"
          },
          {
            "Key": "Name",
            "Value": "complex.example.com"
          },
          {
            "Key": "kubernetes.io/cluster/complex.example.com",
            "Value": "owned"
          }
        ]
      }
    },
    "AWSEC2Route00000": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "AWSEC2RouteTablecomplexexamplecom"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "AWSEC2InternetGatewaycomplexexamplecom"
        }
      }
    },
    "AWSEC2RouteTablecomplexexamplecom": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "AWSEC2VPCcomplexexamplecom"
        },
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "complex.example.com"
          },
          {
            "Key": "Name",
            "Value": "complex.example.com"
          },
          {
            "Key": "kubernetes.io/cluster/complex.example.com",
            "Value": "owned"
          },
          {
            "Key": "kubernetes.io/kops/role",
            "Value": "public"
          }
        ]
      }
    },
    "AWSEC2SecurityGroupEgressapielbegress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupapielbcomplexexamplecom"
        },
        "FromPort": 0,
        "ToPort": 0,
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "AWSEC2SecurityGroupEgressmasteregress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupmasterscomplexexamplecom"
        },
        "FromPort": 0,
        "ToPort": 0,
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "AWSEC2SecurityGroupEgressnodeegress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupnodescomplexexamplecom"
        },
        "FromPort": 0,
        "ToPort": 0,
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "AWSEC2SecurityGroupIngressallmastertomaster": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupmasterscomplexexamplecom"
        },
        "SourceSecurityGroupId": {
          "Ref": "AWSEC2SecurityGroupmasterscomplexexamplecom"
        },
        "FromPort": 0,
        "ToPort": 0,
        "IpProtocol": "-1"
      }
    },
    "AWSEC2SecurityGroupIngressallmastertonode": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupnodescomplexexamplecom"
        },
        "SourceSecurityGroupId": {
          "Ref": "AWSEC2SecurityGroupmasterscomplexexamplecom"
        },
        "FromPort": 0,
        "ToPort": 0,
        "IpProtocol": "-1"
      }
    },
    "AWSEC2SecurityGroupIngressallnodetonode": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupnodescomplexexamplecom"
        },
        "SourceSecurityGroupId": {
          "Ref": "AWSEC2SecurityGroupnodescomplexexamplecom"
        },
        "FromPort": 0,
        "ToPort": 0,
        "IpProtocol": "-1"
      }
    },
    "AWSEC2SecurityGroupIngresshttpsapielb00000": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupapielbcomplexexamplecom"
        },
        "FromPort": 443,
        "ToPort": 443,
        "IpProtocol": "tcp",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "AWSEC2SecurityGroupIngresshttpselbtomaster": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupmasterscomplexexamplecom"
        },
        "SourceSecurityGroupId": {
          "Ref": "AWSEC2SecurityGroupapielbcomplexexamplecom"
        },
        "FromPort": 443,
        "ToPort": 443,
        "IpProtocol": "tcp"
      }
    },
    "AWSEC2SecurityGroupIngressicmppmtuapielb00000": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupapielbcomplexexamplecom"
        },
        "FromPort": 3,
        "ToPort": 4,
        "IpProtocol": "icmp",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "AWSEC2SecurityGroupIngressnodeporttcpexternaltonode102030024": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupnodescomplexexamplecom"
        },
        "FromPort": 28000,
        "ToPort": 32767,
        "IpProtocol": "tcp",
        "CidrIp": "10.20.30.0/24"
      }
    },
    "AWSEC2SecurityGroupIngressnodeporttcpexternaltonode123432": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupnodescomplexexamplecom"
        },
        "FromPort": 28000,
        "ToPort": 32767,
        "IpProtocol": "tcp",
        "CidrIp": "1.2.3.4/32"
      }
    },
    "AWSEC2SecurityGroupIngressnodeportudpexternaltonode102030024": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupnodescomplexexamplecom"
        },
        "FromPort": 28000,
        "ToPort": 32767,
        "IpProtocol": "udp",
        "CidrIp": "10.20.30.0/24"
      }
    },
    "AWSEC2SecurityGroupIngressnodeportudpexternaltonode123432": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupnodescomplexexamplecom"
        },
        "FromPort": 28000,
        "ToPort": 32767,
        "IpProtocol": "udp",
        "CidrIp": "1.2.3.4/32"
      }
    },
    "AWSEC2SecurityGroupIngressnodetomastertcp12379": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupmasterscomplexexamplecom"
        },
        "SourceSecurityGroupId": {
          "Ref": "AWSEC2SecurityGroupnodescomplexexamplecom"
        },
        "FromPort": 1,
        "ToPort": 2379,
        "IpProtocol": "tcp"
      }
    },
    "AWSEC2SecurityGroupIngressnodetomastertcp23824000": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupmasterscomplexexamplecom"
        },
        "SourceSecurityGroupId": {
          "Ref": "AWSEC2SecurityGroupnodescomplexexamplecom"
        },
        "FromPort": 2382,
        "ToPort": 4000,
        "IpProtocol": "tcp"
      }
    },
    "AWSEC2SecurityGroupIngressnodetomastertcp400365535": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupmasterscomplexexamplecom"
        },
        "SourceSecurityGroupId": {
          "Ref": "AWSEC2SecurityGroupnodescomplexexamplecom"
        },
        "FromPort": 4003,
        "ToPort": 65535,
        "IpProtocol": "tcp"
      }
    },
    "AWSEC2SecurityGroupIngressnodetomasterudp165535": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupmasterscomplexexamplecom"
        },
        "SourceSecurityGroupId": {
          "Ref": "AWSEC2SecurityGroupnodescomplexexamplecom"
        },
        "FromPort": 1,
        "ToPort": 65535,
        "IpProtocol": "udp"
      }
    },
    "AWSEC2SecurityGroupIngresssshexternaltomaster00000": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupmasterscomplexexamplecom"
        },
        "FromPort": 22,
        "ToPort": 22,
        "IpProtocol": "tcp",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "AWSEC2SecurityGroupIngresssshexternaltonode00000": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupnodescomplexexamplecom"
        },
        "FromPort": 22,
        "ToPort": 22,
        "IpProtocol": "tcp",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "AWSEC2SecurityGroupapielbcomplexexamplecom": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "AWSEC2VPCcomplexexamplecom"
        },
        "GroupDescription": "Security group for api ELB",
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "complex.example.com"
          },
          {
            "Key": "Name",
            "Value": "api-elb.complex.example.com"
          },
          {
            "Key": "kubernetes.io/cluster/complex.example.com",
            "Value": "owned"
          }
        ]
      }
    },
    "AWSEC2SecurityGroupmasterscomplexexamplecom": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "AWSEC2VPCcomplexexamplecom"
        },
        "GroupDescription": "Security group for masters",
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "complex.example.com"
          },
          {
            "Key": "Name",
            "Value": "masters.complex.example.com"
          },
          {
            "Key": "kubernetes.io/cluster/complex.example.com",
            "Value": "owned"
          }
        ]
      }
    },
    "AWSEC2SecurityGroupnodescomplexexamplecom": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "AWSEC2VPCcomplexexamplecom"
        },
        "GroupDescription": "Security group for nodes",
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "complex.example.com"
          },
          {
            "Key": "Name",
            "Value": "nodes.complex.example.com"
          },
          {
            "Key": "kubernetes.io/cluster/complex.example.com",
            "Value": "owned"
          }
        ]
      }
    },
    "AWSEC2SubnetRouteTableAssociationustest1acomplexexamplecom": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "AWSEC2Subnetustest1acomplexexamplecom"
        },
        "RouteTableId": {
          "Ref": "AWSEC2RouteTablecomplexexamplecom"
        }
      }
    },
    "AWSEC2Subnetustest1acomplexexamplecom": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "AWSEC2VPCcomplexexamplecom"
        },
        "CidrBlock": "172.20.32.0/19",
        "AvailabilityZone": "us-test-1a",
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "complex.example.com"
          },
          {
            "Key": "Name",
            "Value": "us-test-1a.complex.example.com"
          },
          {
            "Key": "SubnetType",
            "Value": "Public"
          },
          {
            "Key": "kubernetes.io/cluster/complex.example.com",
            "Value": "owned"
          },
          {
            "Key": "kubernetes.io/role/elb",
            "Value": "1"
          }
        ]
      }
    },
    "AWSEC2VPCDHCPOptionsAssociationcomplexexamplecom": {
      "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
      "Properties": {
        "VpcId": {
          "Ref": "AWSEC2VPCcomplexexamplecom"
        },
        "DhcpOptionsId": {
          "Ref": "AWSEC2DHCPOptionscomplexexamplecom"
        }
      }
    },
    "AWSEC2VPCGatewayAttachmentcomplexexamplecom": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "AWSEC2VPCcomplexexamplecom"
        },
        "InternetGatewayId": {
          "Ref": "AWSEC2InternetGatewaycomplexexamplecom"
        }
      }
    },
    "AWSEC2VPCcomplexexamplecom": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "172.20.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "complex.example.com"
          },
          {
            "Key": "Name",
            "Value": "complex.example.com"
          },
          {
            "Key": "kubernetes.io/cluster/complex.example.com",
            "Value": "owned"
          }
        ]
      }
    },
    "AWSEC2Volumeustest1aetcdeventscomplexexamplecom": {
      "Type": "AWS::EC2::Volume",
      "Properties": {
        "AvailabilityZone": "us-test-1a",
        "Size": 20,
        "VolumeType": "gp2",
        "Encrypted": false,
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "complex.example.com"
          },
          {
            "Key": "Name",
            "Value": "us-test-1a.etcd-events.complex.example.com"
          },
          {
            "Key": "Owner",
            "Value": "John Doe"
          },
          {
            "Key": "foo/bar",
            "Value": "fib+baz"
          },
          {
            "Key": "k8s.io/etcd/events",
            "Value": "us-test-1a/us-test-1a"
          },
          {
            "Key": "k8s.io/role/master",
            "Value": "1"
          },
          {
            "Key": "kubernetes.io/cluster/complex.example.com",
            "Value": "owned"
          }
        ]
      }
    },
    "AWSEC2Volumeustest1aetcdmaincomplexexamplecom": {
      "Type": "AWS::EC2::Volume",
      "Properties": {
        "AvailabilityZone": "us-test-1a",
        "Size": 20,
        "VolumeType": "gp2",
        "Encrypted": false,
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "complex.example.com"
          },
          {
            "Key": "Name",
            "Value": "us-test-1a.etcd-main.complex.example.com"
          },
          {
            "Key": "Owner",
            "Value": "John Doe"
          },
          {
            "Key": "foo/bar",
            "Value": "fib+baz"
          },
          {
            "Key": "k8s.io/etcd/main",
            "Value": "us-test-1a/us-test-1a"
          },
          {
            "Key": "k8s.io/role/master",
            "Value": "1"
          },
          {
            "Key": "kubernetes.io/cluster/complex.example.com",
            "Value": "owned"
          }
        ]
      }
    },
    "AWSElasticLoadBalancingLoadBalancerapicomplexexamplecom": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "LoadBalancerName": "api-complex-example-com-vd3t5n",
        "Listeners": [
          {
            "InstancePort": 443,
            "InstanceProtocol": "TCP",
            "LoadBalancerPort": 443,
            "Protocol": "TCP"
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "AWSEC2SecurityGroupapielbcomplexexamplecom"
          },
          "sg-exampleid3",
          "sg-exampleid4"
        ],
        "Subnets": [
          {
            "Ref": "AWSEC2Subnetustest1acomplexexamplecom"
          }
        ],
        "HealthCheck": {
          "Target": "SSL:443",
          "HealthyThreshold": 2,
          "UnhealthyThreshold": 2,
          "Interval": 10,
          "Timeout": 5
        },
        "ConnectionSettings": {
          "IdleTimeout": 300
        },
        "CrossZone": false,
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "complex.example.com"
          },
          {
            "Key": "Name",
            "Value": "api.complex.example.com"
          },
          {
            "Key": "Owner",
            "Value": "John Doe"
          },
          {
            "Key": "foo/bar",
            "Value": "fib+baz"
          },
          {
            "Key": "kubernetes.io/cluster/complex.example.com",
            "Value": "owned"
          }
        ]
      }
    },
    "AWSIAMInstanceProfilemasterscomplexexamplecom": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "AWSIAMRolemasterscomplexexamplecom"
          }
        ]
      }
    },
    "AWSIAMInstanceProfilenodescomplexexamplecom": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "AWSIAMRolenodescomplexexamplecom"
          }
        ]
      }
    },
    "AWSIAMPolicymasterscomplexexamplecom": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "masters.complex.example.com",
        "Roles": [
          {
            "Ref": "AWSIAMRolemasterscomplexexamplecom"
          }
        ],
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ec2:*"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
            {
              "Action": [
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:DescribeAutoScalingInstances",
                "autoscaling:DescribeLaunchConfigurations",
                "autoscaling:DescribeTags",
                "autoscaling:SetDesiredCapacity",
                "autoscaling:TerminateInstanceInAutoScalingGroup",
                "autoscaling:UpdateAutoScalingGroup",
                "ec2:DescribeLaunchTemplateVersions"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
            {
              "Action": [
                "elasticloadbalancing:*"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
            {
              "Action": [
                "iam:ListServerCertificates",
                "iam:GetServerCertificate"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
            {
              "Action": [
                "route53:ChangeResourceRecordSets",
                "route53:ListResourceRecordSets",
                "route53:GetHostedZone"
              ],
              "Effect": "Allow",
              "Resource": [
                "arn:aws:route53:::hostedzone/Z1AFAKE1ZON3YO"
              ]
            },
            {
              "Action": [
                "route53:GetChange"
              ],
              "Effect": "Allow",
              "Resource": [
                "arn:aws:route53:::change/*"
              ]
            },
            {
              "Action": [
                "route53:ListHostedZones"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
            {
              "Action": [
                "route53:ListHostedZones"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
            {
              "Action": [
                "ecr:GetAuthorizationToken",
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:GetRepositoryPolicy",
                "ecr:DescribeRepositories",
                "ecr:ListImages",
                "ecr:BatchGetImage"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "AWSIAMPolicynodescomplexexamplecom": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "nodes.complex.example.com",
        "Roles": [
          {
            "Ref": "AWSIAMRolenodescomplexexamplecom"
          }
        ],
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ec2:DescribeInstances",
                "ec2:DescribeRegions"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
            {
              "Action": [
                "route53:ChangeResourceRecordSets",
                "route53:ListResourceRecordSets",
                "route53:GetHostedZone"
              ],
              "Effect": "Allow",
              "Resource": [
                "arn:aws:route53:::hostedzone/Z1AFAKE1ZON3YO"
              ]
            },
            {
              "Action": [
                "route53:GetChange"
              ],
              "Effect": "Allow",
              "Resource": [
                "arn:aws:route53:::change/*"
              ]
            },
            {
              "Action": [
                "route53:ListHostedZones"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
            {
              "Action": [
                "route53:ListHostedZones"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
            {
              "Action": [
                "ecr:GetAuthorizationToken",
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:GetRepositoryPolicy",
                "ecr:DescribeRepositories",
                "ecr:ListImages",
                "ecr:BatchGetImage"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "AWSIAMRolemasterscomplexexamplecom": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "masters.complex.example.com",
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "AWSIAMRolenodescomplexexamplecom": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "nodes.complex.example.com",
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "AWSRoute53RecordSetapicomplexexamplecom": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "Name": "api.complex.example.com",
        "Type": "A",
        "AliasTarget": {
          "DNSName": {
            "Fn::GetAtt": [
              "AWSElasticLoadBalancingLoadBalancerapicomplexexamplecom",
              "DNSName"
            ]
          },
          "HostedZoneId": {
            "Fn::GetAtt": [
              "AWSElasticLoadBalancingLoadBalancerapicomplexexamplecom",
              "CanonicalHostedZoneNameID"
            ]
          },
          "EvaluateTargetHealth": false
        },
        "HostedZoneId": "/hostedzone/Z1AFAKE1ZON3YO"
      }
    }
  }
}
