Resources.AWSAutoScalingLaunchConfigurationmasterustest1amastersadditionaluserdataexamplecom.Properties.UserData: |
  Content-Type: multipart/mixed; boundary="MIMEBOUNDARY"
  MIME-Version: 1.0

  --MIMEBOUNDARY
  Content-Disposition: attachment; filename="nodeup.sh"
  Content-Transfer-Encoding: 7bit
  Content-Type: text/x-shellscript
  Mime-Version: 1.0

  #!/bin/bash
  # Copyright 2016 The Kubernetes Authors All rights reserved.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.

  set -o errexit
  set -o nounset
  set -o pipefail

  NODEUP_URL=https://kubeupv2.s3.amazonaws.com/kops/1.8.1/linux/amd64/nodeup
  NODEUP_HASH=bb41724c37d15ab7e039e06230e742b9b38d0808

  export AWS_REGION=us-test-1




  function ensure-install-dir() {
    INSTALL_DIR="/var/cache/kubernetes-install"
    # On ContainerOS, we install to /var/lib/toolbox install (because of noexec)
    if [[ -d /var/lib/toolbox ]]; then
      INSTALL_DIR="/var/lib/toolbox/kubernetes-install"
    fi
    mkdir -p ${INSTALL_DIR}
    cd ${INSTALL_DIR}
  }

  # Retry a download until we get it. Takes a hash and a set of URLs.
  #
  # $1 is the sha1 of the URL. Can be "" if the sha1 is unknown.
  # $2+ are the URLs to download.
  download-or-bust() {
    local -r hash="$1"
    shift 1

    urls=( $* )
    while true; do
      for url in "${urls[@]}"; do
        local file="${url##*/}"

        if [[ -e "${file}" ]]; then
          echo "== File exists for ${url} =="

        # CoreOS runs this script in a container without which (but has curl)
        # Note also that busybox wget doesn't support wget --version, but busybox doesn't normally have curl
        # So we default to wget unless we see curl
        elif [[ $(curl --version) ]]; then
          if ! curl -f --ipv4 -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10 "${url}"; then
            echo "== Failed to curl ${url}. Retrying. =="
            break
          fi
        else
          if ! wget --inet4-only -O "${file}" --connect-timeout=20 --tries=6 --wait=10 "${url}"; then
            echo "== Failed to wget ${url}. Retrying. =="
            break
          fi
        fi

        if [[ -n "${hash}" ]] && ! validate-hash "${file}" "${hash}"; then
          echo "== Hash validation of ${url} failed. Retrying. =="
          rm -f "${file}"
        else
          if [[ -n "${hash}" ]]; then
            echo "== Downloaded ${url} (SHA1 = ${hash}) =="
          else
            echo "== Downloaded ${url} =="
          fi
          return
        fi
      done

      echo "All downloads failed; sleeping before retrying"
      sleep 60
    done
  }

  validate-hash() {
    local -r file="$1"
    local -r expected="$2"
    local actual

    actual=$(sha1sum ${file} | awk '{ print $1 }') || true
    if [[ "${actual}" != "${expected}" ]]; then
      echo "== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} =="
      return 1
    fi
  }

  function split-commas() {
    echo $1 | tr "," "\n"
  }

  function try-download-release() {
    # TODO(zmerlynn): Now we REALLY have no excuse not to do the reboot
    # optimization.

    local -r nodeup_urls=( $(split-commas "${NODEUP_URL}") )
    local -r nodeup_filename="${nodeup_urls[0]##*/}"
    if [[ -n "${NODEUP_HASH:-}" ]]; then
      local -r nodeup_hash="${NODEUP_HASH}"
    else
    # TODO: Remove?
      echo "Downloading sha1 (not found in env)"
      download-or-bust "" "${nodeup_urls[@]/%/.sha1}"
      local -r nodeup_hash=$(cat "${nodeup_filename}.sha1")
    fi

    echo "Downloading nodeup (${nodeup_urls[@]})"
    download-or-bust "${nodeup_hash}" "${nodeup_urls[@]}"

    chmod +x nodeup
  }

  function download-release() {
    # In case of failure checking integrity of release, retry.
    until try-download-release; do
      sleep 15
      echo "Couldn't download release. Retrying..."
    done

    echo "Running nodeup"
    # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
    ( cd ${INSTALL_DIR}; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/kube_env.yaml --v=8  )
  }

  ####################################################################################

  /bin/systemd-machine-id-setup || echo "failed to set up ensure machine-id configured"

  echo "== nodeup node config starting =="
  ensure-install-dir

  cat > cluster_spec.yaml << '__EOF_CLUSTER_SPEC'
  cloudConfig: null
  docker:
    ipMasq: false
    ipTables: false
    logLevel: warn
    storage: overlay,aufs
    version: 1.11.2
  encryptionConfig: null
  etcdClusters:
    events:
      image: gcr.io/google_containers/etcd:2.2.1
      version: 2.2.1
    main:
      image: gcr.io/google_containers/etcd:2.2.1
      version: 2.2.1
  kubeAPIServer:
    address: 127.0.0.1
    admissionControl:
    - NamespaceLifecycle
    - LimitRanger
    - ServiceAccount
    - PersistentVolumeLabel
    - DefaultStorageClass
    - ResourceQuota
    allowPrivileged: true
    apiServerCount: 1
    authorizationMode: AlwaysAllow
    cloudProvider: aws
    etcdServers:
    - http://127.0.0.1:4001
    etcdServersOverrides:
    - /events#http://127.0.0.1:4002
    image: gcr.io/google_containers/kube-apiserver:v1.4.12
    insecurePort: 8080
    logLevel: 2
    securePort: 443
    serviceClusterIPRange: 100.64.0.0/13
    storageBackend: etcd2
  kubeControllerManager:
    allocateNodeCIDRs: true
    attachDetachReconcileSyncPeriod: 1m0s
    cloudProvider: aws
    clusterCIDR: 100.96.0.0/11
    clusterName: additionaluserdata.example.com
    configureCloudRoutes: true
    image: gcr.io/google_containers/kube-controller-manager:v1.4.12
    leaderElection:
      leaderElect: true
    logLevel: 2
    master: 127.0.0.1:8080
  kubeProxy:
    clusterCIDR: 100.96.0.0/11
    cpuRequest: 100m
    hostnameOverride: '@aws'
    image: gcr.io/google_containers/kube-proxy:v1.4.12
    logLevel: 2
  kubeScheduler:
    image: gcr.io/google_containers/kube-scheduler:v1.4.12
    leaderElection:
      leaderElect: true
    logLevel: 2
    master: http://127.0.0.1:8080
  kubelet:
    allowPrivileged: true
    apiServers: https://api.internal.additionaluserdata.example.com
    babysitDaemons: true
    cgroupRoot: docker
    cloudProvider: aws
    clusterDNS: 100.64.0.10
    clusterDomain: cluster.local
    enableDebuggingHandlers: true
    evictionHard: memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%,imagefs.available<10%,imagefs.inodesFree<5%
    hostnameOverride: '@aws'
    logLevel: 2
    networkPluginMTU: 9001
    networkPluginName: kubenet
    nonMasqueradeCIDR: 100.64.0.0/10
    podInfraContainerImage: gcr.io/google_containers/pause-amd64:3.0
    podManifestPath: /etc/kubernetes/manifests
    reconcileCIDR: true
  masterKubelet:
    allowPrivileged: true
    apiServers: http://127.0.0.1:8080
    babysitDaemons: true
    cgroupRoot: docker
    cloudProvider: aws
    clusterDNS: 100.64.0.10
    clusterDomain: cluster.local
    enableDebuggingHandlers: true
    evictionHard: memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%,imagefs.available<10%,imagefs.inodesFree<5%
    hostnameOverride: '@aws'
    logLevel: 2
    networkPluginMTU: 9001
    networkPluginName: kubenet
    nonMasqueradeCIDR: 100.64.0.0/10
    podCIDR: 10.123.45.0/28
    podInfraContainerImage: gcr.io/google_containers/pause-amd64:3.0
    podManifestPath: /etc/kubernetes/manifests
    reconcileCIDR: true
    registerSchedulable: false

  __EOF_CLUSTER_SPEC

  cat > ig_spec.yaml << '__EOF_IG_SPEC'
  kubelet: null
  nodeLabels: null
  taints: null

  __EOF_IG_SPEC

  cat > kube_env.yaml << '__EOF_KUBE_ENV'
  Assets:
  - c4871c7315817ee114f5c554a58da8ebc54f08c3@https://storage.googleapis.com/kubernetes-release/release/v1.4.12/bin/linux/amd64/kubelet
  - d9fdb6b37597d371ef853cde76170f38a553aa78@https://storage.googleapis.com/kubernetes-release/release/v1.4.12/bin/linux/amd64/kubectl
  - 19d49f7b2b99cd2493d5ae0ace896c64e289ccbb@https://storage.googleapis.com/kubernetes-release/network-plugins/cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz
  - 42b15a0a0a56531750bde3c7b08d0cf27c170c48@https://github.com/kubernetes/kops/releases/download/1.8.1/linux/amd64/utils.tar.gz,https://kubeupv2.s3.amazonaws.com/kops/1.8.1/linux/amd64/utils.tar.gz
  ClusterName: additionaluserdata.example.com
  ConfigBase: memfs://clusters.example.com/additionaluserdata.example.com
  InstanceGroupName: master-us-test-1a
  Tags:
  - _automatic_upgrades
  - _aws
  channels:
  - memfs://clusters.example.com/additionaluserdata.example.com/addons/bootstrap-channel.yaml
  protokubeImage:
    hash: 0b1f26208f8f6cc02468368706d0236670fec8a2
    name: protokube:1.8.1
    source: https://kubeupv2.s3.amazonaws.com/kops/1.8.1/images/protokube.tar.gz

  __EOF_KUBE_ENV

  download-release
  echo "== nodeup node config done =="

  --MIMEBOUNDARY
  Content-Disposition: attachment; filename="myscript.sh"
  Content-Transfer-Encoding: 7bit
  Content-Type: text/x-shellscript
  Mime-Version: 1.0

  #!/bin/sh
  echo "master: The time is now $(date -R)!" | tee /root/output.txt

  --MIMEBOUNDARY--
Resources.AWSAutoScalingLaunchConfigurationnodesadditionaluserdataexamplecom.Properties.UserData: |
  Content-Type: multipart/mixed; boundary="MIMEBOUNDARY"
  MIME-Version: 1.0

  --MIMEBOUNDARY
  Content-Disposition: attachment; filename="nodeup.sh"
  Content-Transfer-Encoding: 7bit
  Content-Type: text/x-shellscript
  Mime-Version: 1.0

  #!/bin/bash
  # Copyright 2016 The Kubernetes Authors All rights reserved.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.

  set -o errexit
  set -o nounset
  set -o pipefail

  NODEUP_URL=https://kubeupv2.s3.amazonaws.com/kops/1.8.1/linux/amd64/nodeup
  NODEUP_HASH=bb41724c37d15ab7e039e06230e742b9b38d0808

  export AWS_REGION=us-test-1




  function ensure-install-dir() {
    INSTALL_DIR="/var/cache/kubernetes-install"
    # On ContainerOS, we install to /var/lib/toolbox install (because of noexec)
    if [[ -d /var/lib/toolbox ]]; then
      INSTALL_DIR="/var/lib/toolbox/kubernetes-install"
    fi
    mkdir -p ${INSTALL_DIR}
    cd ${INSTALL_DIR}
  }

  # Retry a download until we get it. Takes a hash and a set of URLs.
  #
  # $1 is the sha1 of the URL. Can be "" if the sha1 is unknown.
  # $2+ are the URLs to download.
  download-or-bust() {
    local -r hash="$1"
    shift 1

    urls=( $* )
    while true; do
      for url in "${urls[@]}"; do
        local file="${url##*/}"

        if [[ -e "${file}" ]]; then
          echo "== File exists for ${url} =="

        # CoreOS runs this script in a container without which (but has curl)
        # Note also that busybox wget doesn't support wget --version, but busybox doesn't normally have curl
        # So we default to wget unless we see curl
        elif [[ $(curl --version) ]]; then
          if ! curl -f --ipv4 -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10 "${url}"; then
            echo "== Failed to curl ${url}. Retrying. =="
            break
          fi
        else
          if ! wget --inet4-only -O "${file}" --connect-timeout=20 --tries=6 --wait=10 "${url}"; then
            echo "== Failed to wget ${url}. Retrying. =="
            break
          fi
        fi

        if [[ -n "${hash}" ]] && ! validate-hash "${file}" "${hash}"; then
          echo "== Hash validation of ${url} failed. Retrying. =="
          rm -f "${file}"
        else
          if [[ -n "${hash}" ]]; then
            echo "== Downloaded ${url} (SHA1 = ${hash}) =="
          else
            echo "== Downloaded ${url} =="
          fi
          return
        fi
      done

      echo "All downloads failed; sleeping before retrying"
      sleep 60
    done
  }

  validate-hash() {
    local -r file="$1"
    local -r expected="$2"
    local actual

    actual=$(sha1sum ${file} | awk '{ print $1 }') || true
    if [[ "${actual}" != "${expected}" ]]; then
      echo "== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} =="
      return 1
    fi
  }

  function split-commas() {
    echo $1 | tr "," "\n"
  }

  function try-download-release() {
    # TODO(zmerlynn): Now we REALLY have no excuse not to do the reboot
    # optimization.

    local -r nodeup_urls=( $(split-commas "${NODEUP_URL}") )
    local -r nodeup_filename="${nodeup_urls[0]##*/}"
    if [[ -n "${NODEUP_HASH:-}" ]]; then
      local -r nodeup_hash="${NODEUP_HASH}"
    else
    # TODO: Remove?
      echo "Downloading sha1 (not found in env)"
      download-or-bust "" "${nodeup_urls[@]/%/.sha1}"
      local -r nodeup_hash=$(cat "${nodeup_filename}.sha1")
    fi

    echo "Downloading nodeup (${nodeup_urls[@]})"
    download-or-bust "${nodeup_hash}" "${nodeup_urls[@]}"

    chmod +x nodeup
  }

  function download-release() {
    # In case of failure checking integrity of release, retry.
    until try-download-release; do
      sleep 15
      echo "Couldn't download release. Retrying..."
    done

    echo "Running nodeup"
    # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
    ( cd ${INSTALL_DIR}; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/kube_env.yaml --v=8  )
  }

  ####################################################################################

  /bin/systemd-machine-id-setup || echo "failed to set up ensure machine-id configured"

  echo "== nodeup node config starting =="
  ensure-install-dir

  cat > cluster_spec.yaml << '__EOF_CLUSTER_SPEC'
  cloudConfig: null
  docker:
    ipMasq: false
    ipTables: false
    logLevel: warn
    storage: overlay,aufs
    version: 1.11.2
  kubeProxy:
    clusterCIDR: 100.96.0.0/11
    cpuRequest: 100m
    hostnameOverride: '@aws'
    image: gcr.io/google_containers/kube-proxy:v1.4.12
    logLevel: 2
  kubelet:
    allowPrivileged: true
    apiServers: https://api.internal.additionaluserdata.example.com
    babysitDaemons: true
    cgroupRoot: docker
    cloudProvider: aws
    clusterDNS: 100.64.0.10
    clusterDomain: cluster.local
    enableDebuggingHandlers: true
    evictionHard: memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%,imagefs.available<10%,imagefs.inodesFree<5%
    hostnameOverride: '@aws'
    logLevel: 2
    networkPluginMTU: 9001
    networkPluginName: kubenet
    nonMasqueradeCIDR: 100.64.0.0/10
    podInfraContainerImage: gcr.io/google_containers/pause-amd64:3.0
    podManifestPath: /etc/kubernetes/manifests
    reconcileCIDR: true

  __EOF_CLUSTER_SPEC

  cat > ig_spec.yaml << '__EOF_IG_SPEC'
  kubelet: null
  nodeLabels: null
  taints: null

  __EOF_IG_SPEC

  cat > kube_env.yaml << '__EOF_KUBE_ENV'
  Assets:
  - c4871c7315817ee114f5c554a58da8ebc54f08c3@https://storage.googleapis.com/kubernetes-release/release/v1.4.12/bin/linux/amd64/kubelet
  - d9fdb6b37597d371ef853cde76170f38a553aa78@https://storage.googleapis.com/kubernetes-release/release/v1.4.12/bin/linux/amd64/kubectl
  - 19d49f7b2b99cd2493d5ae0ace896c64e289ccbb@https://storage.googleapis.com/kubernetes-release/network-plugins/cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz
  - 42b15a0a0a56531750bde3c7b08d0cf27c170c48@https://github.com/kubernetes/kops/releases/download/1.8.1/linux/amd64/utils.tar.gz,https://kubeupv2.s3.amazonaws.com/kops/1.8.1/linux/amd64/utils.tar.gz
  ClusterName: additionaluserdata.example.com
  ConfigBase: memfs://clusters.example.com/additionaluserdata.example.com
  InstanceGroupName: nodes
  Tags:
  - _automatic_upgrades
  - _aws
  channels:
  - memfs://clusters.example.com/additionaluserdata.example.com/addons/bootstrap-channel.yaml
  protokubeImage:
    hash: 0b1f26208f8f6cc02468368706d0236670fec8a2
    name: protokube:1.8.1
    source: https://kubeupv2.s3.amazonaws.com/kops/1.8.1/images/protokube.tar.gz

  __EOF_KUBE_ENV

  download-release
  echo "== nodeup node config done =="

  --MIMEBOUNDARY
  Content-Disposition: attachment; filename="myscript.sh"
  Content-Transfer-Encoding: 7bit
  Content-Type: text/x-shellscript
  Mime-Version: 1.0

  #!/bin/sh
  echo "nodes: The time is now $(date -R)!" | tee /root/output.txt

  --MIMEBOUNDARY--
